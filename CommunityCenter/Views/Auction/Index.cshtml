@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<CommunityCenterModels.Dessert>

<div class="container">
    <h2 class="mb-4">Active Auctions</h2>
    @if (User.IsInRole("Admin"))
    {
        <a asp-action="Create" class="btn btn-primary mb-3">Create New Auction</a>
    }
    <div class="row">
        @foreach (var dessert in Model)
        {
            <div class="col-md-4 mb-4">
                <div class="card">
                    <img src="@dessert.ImageUrl" class="card-img-top" alt="@dessert.Name">
                    <div class="card-body">
                        <h5 class="card-title">@dessert.Name</h5>
                        <p class="card-text">@dessert.Description</p>
                        <div class="current-price" data-dessert-id="@dessert.Id">
                            Current Price: $<span class="price-value">@dessert.CurrentPrice.ToString("F2")</span>
                        </div>
                        <div class="current-winner" data-dessert-id="@dessert.Id">
                            Leading Bidder: <span class="winner-name">@(dessert.WinningBidder?.UserName ?? "No bids yet")</span>
                        </div>
                        <div class="bid-form">
                            <input type="number" step="0.01" class="form-control bid-amount" />
                            <button class="btn btn-primary mt-2 place-bid" data-dessert-id="@dessert.Id">
                                Place Bid
                            </button>
                        </div>
                        <div class="time-remaining" data-end-time="@dessert.EndTime.ToString("O")">
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/auctionHub")
            .withAutomaticReconnect()
            .build();

        connection.on("BidUpdated", (dessertId, newPrice, bidderId, bidderName) => {
            const priceElement = document.querySelector(`[data-dessert-id="${dessertId}"] .price-value`);
            const winnerElement = document.querySelector(`[data-dessert-id="${dessertId}"] .winner-name`);
            if (priceElement) {
                priceElement.textContent = Number(newPrice).toFixed(2);
            }
            if (winnerElement) {
                winnerElement.textContent = bidderName;
            }
        });

        connection.start();

        document.querySelectorAll('.place-bid').forEach(button => {
            button.addEventListener('click', async () => {
                const dessertId = button.dataset.dessertId;
                const bidInput = button.closest('.bid-form').querySelector('.bid-amount');
                const bidAmount = parseFloat(bidInput.value);

                if (!bidAmount || bidAmount <= 0) {
                    alert('Please enter a valid bid amount');
                    return;
                }

                try {
                    const response = await fetch('/Auction/PlaceBid', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ dessertId, bidAmount })
                    });

                    const result = await response.json();
                    if (result.success) {
                        bidInput.value = '';
                    } else {
                        alert(result.message || 'Bid failed. Please try again.');
                    }
                } catch (error) {
                    console.error('Error placing bid:', error);
                }
            });
        });

        function updateTimeRemaining() {
            document.querySelectorAll('.time-remaining').forEach(element => {
                const endTime = new Date(element.dataset.endTime);
                const now = new Date();
                const diff = endTime - now;

                if (diff <= 0) {
                    element.textContent = 'Auction ended';
                    element.closest('.card').querySelector('.bid-form').style.display = 'none';
                } else {
                    const hours = Math.floor(diff / (1000 * 60 * 60));
                    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((diff % (1000 * 60)) / 1000);
                    element.textContent = `Time remaining: ${hours}h ${minutes}m ${seconds}s`;
                }
            });
        }

        setInterval(updateTimeRemaining, 1000);
        updateTimeRemaining();
    </script>
}
