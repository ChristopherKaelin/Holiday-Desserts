@page "/auction-room"
@using Microsoft.AspNetCore.SignalR.Client
@using RealTimeAuction.Shared.Models
@inject NavigationManager Navigation
@inject ILogger<AuctionRoom> Logger
@implements IAsyncDisposable

<div class="container">
    <h1>@auction?.AuctionName</h1>

    <div class="desserts-grid">
        @foreach (var dessert in desserts)
        {
            <div class="dessert-card">
                <img src="@GetImageUrl(dessert.DessertImage)" alt="@dessert.Name" />
                <h3>@dessert.Name</h3>
                <p>@dessert.Description</p>
                <div class="bid-info">
                    <p>Current Bid: $@dessert.CurrentBid</p>
                    <p>Current Bidder: @dessert.CurrentBidUser</p>
                </div>
                @if (auction?.IsActive == true)
                {
                    <div class="bid-form">
                        <input type="number" @bind="newBidAmounts[dessert.DessertId]" step="0.01"
                            min="@(dessert.CurrentBid + 1)" />
                        <button @onclick="() => PlaceBid(dessert.DessertId)">
                            Place Bid
                        </button>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private List<Dessert> desserts = new();
    private Auction auction;
    private Dictionary<int, decimal> newBidAmounts = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/auctionHub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<int, decimal, string>("UpdateBid", (dessertId, amount, userId) =>
        {
            var dessert = desserts.FirstOrDefault(d => d.DessertId == dessertId);
            if (dessert != null)
            {
                dessert.CurrentBid = amount;
                dessert.CurrentBidUser = userId;
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
        await LoadDesserts();
        await LoadAuction();
    }

    private async Task PlaceBid(int dessertId)
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            try
            {
                await hubConnection.SendAsync("PlaceBid", dessertId,
                newBidAmounts[dessertId], "currentUserId");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error placing bid");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task LoadDesserts()
    {
        // Implement HTTP call to load desserts
    }

    private async Task LoadAuction()
    {
        // Implement HTTP call to load active auction
    }

    private string GetImageUrl(string imageName)
    {
        // Implement logic to get image URL
        return $"~/images/{imageName}.jpg"; // Example: "~/images/{Dessert.DessertImage}";
    }
}
