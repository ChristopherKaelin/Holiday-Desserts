@page
@model HolidayDessertStore.Pages.Checkout.IndexModel
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Checkout";
}

<div class="container">
    <h2>Checkout</h2>
    <div id="checkout-form">
        <div id="loading" class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Redirecting to secure checkout...</p>
        </div>
        <div id="error-message" class="alert alert-danger d-none"></div>
    </div>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const stripe = Stripe('@Configuration["Stripe:PublishableKey"]');
            const loading = document.getElementById('loading');
            const errorMessage = document.getElementById('error-message');

            async function initiateCheckout() {
                try {
                    const response = await fetch('/Checkout', {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const data = await response.json();
                    if (data.error) {
                        throw new Error(data.error);
                    }

                    const { error } = await stripe.redirectToCheckout({
                        sessionId: data.id
                    });

                    if (error) {
                        throw error;
                    }
                } catch (error) {
                    loading.classList.add('d-none');
                    errorMessage.textContent = error.message;
                    errorMessage.classList.remove('d-none');
                    console.error('Error:', error);
                }
            }

            // Start the checkout process
            initiateCheckout();
        });
    </script>

    <style>
        #checkout-form {
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
        }

        .spinner-border {
            width: 3rem;
            height: 3rem;
        }

        .alert {
            margin-top: 20px;
        }
    </style>
}
