@page
@model HolidayDessertStore.Pages.Checkout.IndexModel
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Checkout";
}

<div class="container">
    <h2>Checkout</h2>
    <div id="payment-form">
        <div id="payment-element">
            <!-- Stripe Elements will be inserted here -->
        </div>
        <button id="submit" class="btn btn-primary mt-3">
            <div class="spinner d-none" id="spinner"></div>
            <span id="button-text">Pay now</span>
        </button>
        <div id="payment-message" class="hidden"></div>
    </div>
</div>

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        let stripe = Stripe('@Configuration["Stripe:PublishableKey"]');
        let elements;

        initialize();

        async function initialize() {
            try {
                const response = await fetch('/Checkout', {
                    method: "GET",
                    headers: { "Content-Type": "application/json" }
                });
                const { id } = await response.json();
                
                const { error } = await stripe.redirectToCheckout({
                    sessionId: id
                });

                if (error) {
                    const messageContainer = document.querySelector('#payment-message');
                    messageContainer.textContent = error.message;
                }
            } catch (error) {
                console.error('Error:', error);
                const messageContainer = document.querySelector('#payment-message');
                messageContainer.textContent = 'An error occurred. Please try again.';
            }
        }
    </script>

    <style>
        #payment-message {
            color: rgb(105, 115, 134);
            font-size: 16px;
            line-height: 20px;
            padding-top: 12px;
            text-align: center;
        }

        #payment-element {
            margin-bottom: 24px;
        }

        button {
            background: #5469d4;
            color: #ffffff;
            border-radius: 4px;
            border: 0;
            padding: 12px 16px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            display: block;
            transition: all 0.2s ease;
            box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);
            width: 100%;
        }

        button:hover {
            filter: contrast(115%);
        }

        button:disabled {
            opacity: 0.5;
            cursor: default;
        }

        .spinner,
        .spinner:before,
        .spinner:after {
            border-radius: 50%;
        }

        .spinner {
            color: #ffffff;
            font-size: 22px;
            text-indent: -99999px;
            margin: 0px auto;
            position: relative;
            width: 20px;
            height: 20px;
            box-shadow: inset 0 0 0 2px;
            transform: translateZ(0);
        }

        .spinner:before,
        .spinner:after {
            position: absolute;
            content: "";
        }

        .spinner:before {
            width: 10.4px;
            height: 20.4px;
            background: #5469d4;
            border-radius: 20.4px 0 0 20.4px;
            top: -0.2px;
            left: -0.2px;
            transform-origin: 10.4px 10.2px;
            animation: loading 2s infinite ease 1.5s;
        }

        .spinner:after {
            width: 10.4px;
            height: 10.2px;
            background: #5469d4;
            border-radius: 0 10.2px 10.2px 0;
            top: -0.1px;
            left: 10.2px;
            transform-origin: 0px 10.2px;
            animation: loading 2s infinite ease;
        }

        @@keyframes loading {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }
    </style>
}
