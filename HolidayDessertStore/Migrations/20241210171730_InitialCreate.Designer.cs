// <auto-generated />
using System;
using HolidayDessertStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HolidayDessertStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241210171730_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("HolidayDessertStore.Models.Dessert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Desserts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Smooth cheesecake topped with orange glaze and fresh orange slices, decorated with whipped cream rosettes",
                            ImagePath = "/images/desserts/orange_slice_cheesecake.jpg",
                            IsAvailable = true,
                            Name = "Orange Creamsicle Cheesecake",
                            Price = 45.99m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Classic key lime tart with graham cracker crust and whipped cream border",
                            ImagePath = "/images/desserts/key_lime_pie.jpg",
                            IsAvailable = true,
                            Name = "Key Lime Tart",
                            Price = 35.99m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Traditional rhubarb pie with lattice top crust and crystallized sugar finish",
                            ImagePath = "/images/desserts/strawberry_rhubarb_pie.jpg",
                            IsAvailable = true,
                            Name = "Rhubarb Pie",
                            Price = 32.99m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Three-layer vanilla cake with fresh strawberries and whipped cream frosting",
                            ImagePath = "/images/desserts/strawberry_shortcake.jpg",
                            IsAvailable = true,
                            Name = "Strawberry Layer Cake",
                            Price = 48.99m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Chocolate bundt cake filled with coconut-pecan filling and topped with shredded coconut",
                            ImagePath = "/images/desserts/German_chocolate_bundt_cake.jpg",
                            IsAvailable = true,
                            Name = "German Chocolate Bundt Cake",
                            Price = 39.99m
                        },
                        new
                        {
                            Id = 6,
                            Description = "Rich, gooey brownies with melted chocolate centers, perfect for chocolate lovers",
                            ImagePath = "/images/desserts/brownies.jpg",
                            IsAvailable = true,
                            Name = "Double Chocolate Fudge Brownies",
                            Price = 24.99m
                        },
                        new
                        {
                            Id = 7,
                            Description = "Classic cinnamon-sugar cookies with a festive twist, perfect with hot cocoa",
                            ImagePath = "/images/desserts/snickerdoodle_cookies.jpg",
                            IsAvailable = true,
                            Name = "Holiday Snickerdoodle Cookies",
                            Price = 18.99m
                        },
                        new
                        {
                            Id = 8,
                            Description = "Warm, flaky crust filled with sweet peaches and spices, served with candlelight ambiance",
                            ImagePath = "/images/desserts/peach_cobbler.jpg",
                            IsAvailable = true,
                            Name = "Fresh Peach Cobbler",
                            Price = 28.99m
                        },
                        new
                        {
                            Id = 9,
                            Description = "Traditional lattice-topped apple pie with cinnamon and spices, surrounded by fall decorations",
                            ImagePath = "/images/desserts/apple_pie.jpg",
                            IsAvailable = true,
                            Name = "Classic Apple Pie",
                            Price = 32.99m
                        },
                        new
                        {
                            Id = 10,
                            Description = "Creamy vanilla pudding layered with fresh bananas, vanilla wafers, and caramel drizzle",
                            ImagePath = "/images/desserts/banana_pudding.jpg",
                            IsAvailable = true,
                            Name = "Banana Pudding Delight",
                            Price = 22.99m
                        });
                });

            modelBuilder.Entity("HolidayDessertStore.Models.PaymentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddressLine1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddressLine2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DessertId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GiftMessage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGift")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingAddressLine1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddressLine2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShippingAddressSameAsBilling")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingState")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DessertId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98d6ff40-bced-4b82-96df-5adab002745d",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGt0KPSiqMddENzt7mpDcN6PoHxB4FsBp15FI86I1Cj/Hkh7y41tczTx2Eo41Q0cIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "75464afd-ac4f-403d-9e83-e8044f2820f0",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HolidayDessertStore.Models.PaymentModel", b =>
                {
                    b.HasOne("HolidayDessertStore.Models.Dessert", "Dessert")
                        .WithMany()
                        .HasForeignKey("DessertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dessert");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
